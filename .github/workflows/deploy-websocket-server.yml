# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

name: Build and Deploy Websocket Server to GKE

on:
  push:
    paths:
      - 'websocket-server/**'
      - '.github/workflows/deploy-websocket-server.yml'

# Environment variables available to all jobs and steps in this workflow
env:
  PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
  APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: europe-west1-b
  GKE_CLUSTER: my-first-cluster-1
  IMAGE: websocket-server
  REGISTRY_HOSTNAME: gcr.io
  DEPLOYMENT_NAME: websocket-server

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}
        service_account_key: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker
      
    # Build the Docker image
    - name: Build
      run: |        
        docker build -t "$REGISTRY_HOSTNAME"/"$PROJECT_ID"/"$IMAGE":"$GITHUB_SHA" websocket-server

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |
        docker push $REGISTRY_HOSTNAME/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        
    # # Set up kustomize
    # - name: Set up Kustomize
    #   run: |
    #     curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
    #     chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      working-directory: websocket-server
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID
        # ./kustomize edit set image $REGISTRY_HOSTNAME/$PROJECT_ID/$IMAGE:${GITHUB_SHA}
        # ./kustomize build . | kubectl apply -f -
        kubectl apply -f deployment.yaml
        kubectl apply -f service.yaml
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
